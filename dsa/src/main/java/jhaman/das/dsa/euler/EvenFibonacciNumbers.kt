package jhaman.das.dsa.euler


/*
Problem2: Project Euler:
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with
1 and 2, the first 10 terms will be:
            1,2,3,5,8,13,21,34,55,89,,,,,
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

* */
fun main() {
    generateEvenFibonacciNumbers()
}


fun generateEvenFibonacciNumbers(limit: Int = 4000000) {
    var sum = 0
    var prev = 1
    var current = 2

    while (current <= limit) {
        if (current % 2 == 0) {
            sum += current
        }
        println("$prev")
        val next = prev + current
        prev = current
        current = next

    }

    println("The sum of even-valued terms in the Fibonacci sequence up to $limit is: $sum")
}


fun generateFibonacciSeries(numberRange: Int) {
    var i = 1
    var t1 = 0
    var t2 = 1
    var evenValuedSum = 0

    print("First $numberRange terms: ")

    while (i <= numberRange) {
        print("$t1 + ")
        if (t1 % 2 == 0) evenValuedSum += t1

        val sum = t1 + t2
        t1 = t2
        t2 = sum

        i++

        if (t1 >= 4000000) break
    }
    print("Last  $t1 sum: ")

}
